import React, { FC, createContext, useContext, useState } from 'react';

export interface {{ pascalCase name }}Props {
  children: any;
}

export interface {{ pascalCase name }}State {
}

export interface {{ pascalCase name }}Actions {
    get: () => {{ pascalCase name }}State;
    set: (state: {{ pascalCase name }}State) => void;
}

export const initialState: {{ pascalCase name }}State = {}

const {{ pascalCase name }}Context = createContext<{{ pascalCase name }}State>(initialState);

export const {{ pascalCase name }}Provider: FC<{{ pascalCase name }}Props> = (props: {{ pascalCase name }}Props) => {
  const [state, setState] = useState<{{ pascalCase name }}State>(initialState);

  const get = (): {{ pascalCase name }}State => state;
  const set = (state: {{ pascalCase name }}State): void => setState(state);

  const {{ camelCase name }}Actions: {{ pascalCase name }}Actions = { get, set };

  return (<{{ pascalCase name }}Context.Provider value={ {{~camelCase name}}Actions} {...props}/>);
}

export const use{{ pascalCase name }}Context = () => useContext({{ pascalCase name }}Context);
